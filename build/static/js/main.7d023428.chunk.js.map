{"version":3,"sources":["Component/Form.js","App.js","serviceWorker.js","index.js","Component/Form.module.css"],"names":["FormComponent","state","name","lastname","email","phone","country","errors","submitHandler","e","preventDefault","console","log","push","split","filter","x","length","indexOf","test","validate","setState","setTimeout","alert","this","onSubmit","value","onChange","evt","target","placeholder","type","className","classes","Errors","map","error","React","Component","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wOA2GeA,E,2MArEXC,MAAQ,CACJC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,OAAQ,I,EAGZC,cAAgB,SAACC,GACbA,EAAEC,iBADiB,MAE6B,EAAKT,MAC/CM,EA/Cd,SAAkBL,EAAMC,EAAUC,EAAOC,EAAOC,GAC5C,IAAMC,EAAS,GA6Bf,OA5BAI,QAAQC,IAAIV,GACC,KAATA,GACAK,EAAOM,KAAK,6BAGC,KAAbV,GACAI,EAAOM,KAAK,4BAGF,KAAVT,GACAG,EAAOM,KAAK,wBAEsC,IAAlDT,EAAMU,MAAM,IAAIC,QAAO,SAAAC,GAAC,MAAU,MAANA,KAAWC,QACvCV,EAAOM,KAAK,6BAGY,IAAxBT,EAAMc,QAAQ,MACdX,EAAOM,KAAK,gCAGV,WAAWM,KAAKd,IAClBE,EAAOM,KAAK,mCAGA,KAAZP,GACAC,EAAOM,KAAK,0BAGTN,EAiBYa,CAHI,EAEZlB,KAFY,EAENC,SAFM,EAEIC,MAFJ,EAEWC,MAFX,EAEkBC,SAErC,OAAIC,EAAOU,OAAS,OAChB,EAAKI,SAAS,CAACd,YAGf,EAAKc,SAAS,CAACd,gBACfe,YAAW,kBAAKC,MAAM,aAAY,K,wEAM/B,IAAD,OACAhB,EAASiB,KAAKvB,MAAMM,OAC1B,OACI,0BAAMkB,SAAUD,KAAKhB,eACjB,6CACA,2BACIkB,MAAOF,KAAKvB,MAAMC,KAClByB,SAAU,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAAEnB,KAAM0B,EAAIC,OAAOH,SAClDI,YAAY,aACZC,KAAK,SACT,4CACA,2BACIL,MAAOF,KAAKvB,MAAME,SAClBwB,SAAU,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAAElB,SAAUyB,EAAIC,OAAOH,SACtDI,YAAY,YACZC,KAAK,SACT,wCACA,2BACIL,MAAOF,KAAKvB,MAAMG,MAClBuB,SAAU,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAAEjB,MAAOwB,EAAIC,OAAOH,SACnDI,YAAY,QACZC,KAAK,SACT,wCACA,2BACIL,MAAOF,KAAKvB,MAAMI,MAClBsB,SAAU,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAAEhB,MAAOuB,EAAIC,OAAOH,SACnDI,YAAY,QACZC,KAAK,SACT,yCACA,2BACIL,MAAOF,KAAKvB,MAAMK,QAClBqB,SAAU,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAAEf,QAASsB,EAAIC,OAAOH,SACrDI,YAAY,UACZC,KAAK,SACT,4BAAQA,KAAK,UAAb,UACA,yBAAKC,UAAWC,IAAQC,QACnB3B,EAAO4B,KAAI,SAAAC,GAAK,OACb,qCAAWA,Y,GA/DPC,IAAMC,WCzBnBC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAACQ,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEpInBC,EAAOC,QAAU,CAAC,OAAS,uB","file":"static/js/main.7d023428.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Form.module.css'\r\n\r\nfunction validate(name, lastname, email, phone, country) {\r\n    const errors = [];\r\n    console.log(name)\r\n    if (name === '') {\r\n        errors.push(\"First name can't be empty\");\r\n    }\r\n\r\n    if (lastname === '') {\r\n        errors.push(\"Last name can't be empty\");\r\n    }\r\n\r\n    if (email === '') {\r\n        errors.push(\"Email can't be empty\")\r\n    }\r\n    if (email.split(\"\").filter(x => x === \"@\").length !== 1) {\r\n        errors.push(\"Email should contain a @\");\r\n    }\r\n\r\n    if (email.indexOf(\".\") === -1) {\r\n        errors.push(\"Email should contain one dot\");\r\n    }\r\n\r\n    if ( !/^[0-9]+$/.test(phone) ) {\r\n        errors.push(\"Phone must contain numbers only\");\r\n    }\r\n\r\n    if (country === '') {\r\n        errors.push(\"Country can't be empty\")\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nclass FormComponent extends React.Component {\r\n\r\n    state = {\r\n        name: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        country: \"\",\r\n        errors: []\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const {name, lastname, email, phone, country} = this.state;\r\n        const errors = validate(name, lastname, email, phone, country);\r\n        if (errors.length > 0) {\r\n            this.setState({errors});\r\n            return;\r\n        } else {\r\n            this.setState({errors});\r\n            setTimeout(()=>(alert('success')),0)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        const errors = this.state.errors;\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                <label>First Name</label>\r\n                <input\r\n                    value={this.state.name}\r\n                    onChange={evt => this.setState({ name: evt.target.value})}\r\n                    placeholder=\"First Name\"\r\n                    type=\"text\"/>\r\n                <label>Last Name</label>\r\n                <input\r\n                    value={this.state.lastname}\r\n                    onChange={evt => this.setState({ lastname: evt.target.value})}\r\n                    placeholder=\"Last Name\"\r\n                    type=\"text\"/>\r\n                <label>Email</label>\r\n                <input\r\n                    value={this.state.email}\r\n                    onChange={evt => this.setState({ email: evt.target.value})}\r\n                    placeholder=\"Email\"\r\n                    type=\"text\"/>\r\n                <label>Phone</label>\r\n                <input\r\n                    value={this.state.phone}\r\n                    onChange={evt => this.setState({ phone: evt.target.value})}\r\n                    placeholder=\"Phone\"\r\n                    type=\"text\"/>\r\n                <label>County</label>\r\n                <input\r\n                    value={this.state.country}\r\n                    onChange={evt => this.setState({ country: evt.target.value})}\r\n                    placeholder=\"Country\"\r\n                    type=\"text\"/>\r\n                <button type=\"submit\">Submit</button>\r\n                <div className={classes.Errors}>\r\n                    {errors.map(error => (\r\n                        <p>Error: {error}</p>\r\n                    ))}\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormComponent;","import React from 'react';\nimport FormComponent from './Component/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Errors\":\"Form_Errors__3c6Cq\"};"],"sourceRoot":""}